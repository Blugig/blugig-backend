enum OfferStatus {
    pending
    accepted
    rejected
    revoked
}

enum OfferType {
    general
    meeting
}

model Offer {
    id              Int         @id @default(autoincrement())
    name            String
    description     String
    timeline        String
    budget          Int
    estimated_hours String?
    total_cost      Int?
    deliverables    String?
    status          OfferStatus @default(pending)
    type            OfferType   @default(general)

    user_id Int
    user    User @relation(fields: [user_id], references: [id])

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    payment Payment?
    Message Message[]
}

enum FormPermissions {
    SOL
    API
    EXP
    ADM
    PRM
    ONE
    PMO
    LIR
    ADH
}

enum FormStatus {
    submitted
    offer_pending
    inprogress
    completed
    cancelled
}

enum FormPaymentStatus {
    pending
    paid
}

model FormSubmission {
    id             Int               @id @default(autoincrement())
    form_type      FormPermissions
    status         FormStatus        @default(submitted)
    payment_status FormPaymentStatus @default(pending)

    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    user_id Int
    user    User @relation(fields: [user_id], references: [id])

    // form relations
    solution_implementation SolutionImplementation?
    api_integration         ApiIntegration?
    hire_smartsheet_expert  HireSmartsheetExpert?
    system_admin_support    SystemAdminSupport?
    premium_app_support     PremiumAppSupport?
    book_one_on_one         BookOneOnOne?
    pmo_control_center      PmoControlCenter?
    license_request         LicenseRequest?
    adhoc_request           AdhocRequest?

    // other relations
    conversation Conversation?
    review       Review?
    cancellation Cancellation?
    refund       Refund?
    payment      Payment?
    reports      Report[]
}

model SolutionImplementation {
    id                      Int    @id @default(autoincrement())
    project_title           String
    implementation_type     String
    description             String
    team_size               String
    departments_involved    String
    current_tools           String
    implementation_features String
    timeline                String
    budget                  String
    requirements            String

    form_submission_id Int            @unique
    form_submission    FormSubmission @relation(fields: [form_submission_id], references: [id], onDelete: Cascade)
}

model ApiIntegration {
    id                     Int    @id @default(autoincrement())
    integration_type       String
    source_system          String
    data_to_sync           String
    sync_direction         String
    sync_frequency         String
    api_access_available   String
    data_volumne           String
    technical_requirements String
    integration_features   String
    timeline               String
    budget                 String
    description            String

    form_submission_id Int            @unique
    form_submission    FormSubmission @relation(fields: [form_submission_id], references: [id], onDelete: Cascade)
}

model HireSmartsheetExpert {
    id                Int    @id @default(autoincrement())
    position_type     String
    job_title         String
    company_name      String
    location          String
    required_skills   String
    experience_level  String
    budget            String
    start_date        String
    contract_duration String
    job_description   String

    form_submission_id Int            @unique
    form_submission    FormSubmission @relation(fields: [form_submission_id], references: [id], onDelete: Cascade)
}

model SystemAdminSupport {
    id                       Int    @id @default(autoincrement())
    support_needed           String
    smartsheet_plan          String
    number_of_users          String
    current_admin_experience String
    current_challenges       String
    admin_task_needed        String
    support_frequency        String
    timezone                 String
    urgency_level            String
    budget                   String
    requirements             String

    form_submission_id Int            @unique
    form_submission    FormSubmission @relation(fields: [form_submission_id], references: [id], onDelete: Cascade)
}

model PremiumAppSupport {
    id                      Int    @id @default(autoincrement())
    organization_name       String
    premium_addons          String
    primary_use_case        String
    current_smartsheet_plan String
    team_size               String
    implementation_scope    String
    requirements            String
    timeline                String
    budget                  String
    primary_contact_email   String

    form_submission_id Int            @unique
    form_submission    FormSubmission @relation(fields: [form_submission_id], references: [id], onDelete: Cascade)
}

model PmoControlCenter {
    id                            Int    @id @default(autoincrement())
    organization_name             String
    control_centre_type           String
    required_features             String
    expected_project_scale        String
    team_size                     String
    current_smartsheet_experience String
    budget                        String
    timeline                      String
    primary_contact_email         String

    form_submission_id Int            @unique
    form_submission    FormSubmission @relation(fields: [form_submission_id], references: [id], onDelete: Cascade)
}

model LicenseRequest {
    id            Int    @id @default(autoincrement())
    license_type  String
    company_name  String
    industry      String
    team_size     String
    full_name     String
    email         String
    phone         String
    job_title     String
    timeline      String
    project_needs String

    form_submission_id Int            @unique
    form_submission    FormSubmission @relation(fields: [form_submission_id], references: [id], onDelete: Cascade)
}

model AdhocRequest {
    id                Int    @id @default(autoincrement())
    need_help_with    String
    description       String
    urgency_level     String
    budget            String
    expected_timeline String

    form_submission_id Int            @unique
    form_submission    FormSubmission @relation(fields: [form_submission_id], references: [id], onDelete: Cascade)
}
