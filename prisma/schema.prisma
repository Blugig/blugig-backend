// Prisma schema with requested changes

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = "file:./dev.db"
}

enum FormPermissions {
    SOL
    API
    EXP
    ADM
    PRM
    ONE
    PMO
    LIR
    ADH
}

model Admin {
    id               String         @id @default(cuid())
    profile_photo    String?
    name             String
    email            String         @unique
    password         String
    is_active        Boolean        @default(false)
    is_super_admin   Boolean        @default(false)
    access_token     String?
    last_login       DateTime?
    generated_otp    Int?
    otp_generated_at DateTime?
    created_at       DateTime       @default(now())
    updated_at       DateTime       @updatedAt
    permissions      String
    Message          Message[]
    Conversation     Conversation[]
}

model User {
    id               Int       @id @default(autoincrement())
    profile_photo    String?
    name             String
    email            String
    is_active        Boolean   @default(false)
    password         String
    phone            String
    company_name     String
    access_token     String?
    last_login       DateTime?
    generated_otp    Int?
    otp_generated_at DateTime?
    user_type        String    @default("customer")
    certificate_link String?
    domain_expertise String
    created_at       DateTime  @default(now())
    updated_at       DateTime  @updatedAt
    deleted_at       DateTime?

    conversations Conversation[]
    submissions   FormSubmission[]
    Message       Message[]
    Offer         Offer[]
    reviews       Review[]
}

enum OfferStatus {
    pending
    accepted
    rejected
    revoked
}

enum OfferType {
    general
    meeting
}

model Offer {
    id          Int         @id @default(autoincrement())
    name        String
    description String
    timeline    String
    budget      Int
    status      OfferStatus
    type        OfferType   @default(general)
    txn_id      String?

    user_id Int
    user    User @relation(fields: [user_id], references: [id])

    created_at DateTime  @default(now())
    updated_at DateTime  @updatedAt
    Message    Message[]
}

model FormSubmission {
    id         Int             @id @default(autoincrement())
    form_type  FormPermissions
    created_at DateTime        @default(now())
    updated_at DateTime        @updatedAt

    user_id Int
    user    User @relation(fields: [user_id], references: [id])

    solution_implementation SolutionImplementation?
    api_integration         ApiIntegration?
    hire_smartsheet_expert  HireSmartsheetExpert?
    system_admin_support    SystemAdminSupport?
    premium_app_support     PremiumAppSupport?
    book_one_on_one         BookOneOnOne?
    pmo_control_center      PmoControlCenter?
    license_request         LicenseRequest?
    adhoc_request           AdhocRequest?

    conversation Conversation?
    review       Review?
}

model SolutionImplementation {
    id                      Int    @id @default(autoincrement())
    project_title           String
    implementation_type     String
    description             String
    team_size               String
    departments_involved    String
    current_tools           String
    implementation_features String
    timeline                String
    budget                  String
    requirements            String

    form_submission_id Int            @unique
    form_submission    FormSubmission @relation(fields: [form_submission_id], references: [id], onDelete: Cascade)
}

model ApiIntegration {
    id                     Int    @id @default(autoincrement())
    integration_type       String
    source_system          String
    data_to_sync           String
    sync_direction         String
    sync_frequency         String
    api_access_available   String
    data_volumne           String
    technical_requirements String
    integration_features   String
    timeline               String
    budget                 String
    description            String

    form_submission_id Int            @unique
    form_submission    FormSubmission @relation(fields: [form_submission_id], references: [id], onDelete: Cascade)
}

model HireSmartsheetExpert {
    id                Int    @id @default(autoincrement())
    position_type     String
    job_title         String
    company_name      String
    location          String
    required_skills   String
    experience_level  String
    budget            String
    start_date        String
    contract_duration String
    job_description   String

    form_submission_id Int            @unique
    form_submission    FormSubmission @relation(fields: [form_submission_id], references: [id], onDelete: Cascade)
}

model SystemAdminSupport {
    id                       Int    @id @default(autoincrement())
    support_needed           String
    smartsheet_plan          String
    number_of_users          String
    current_admin_experience String
    current_challenges       String
    admin_task_needed        String
    support_frequency        String
    timezone                 String
    urgency_level            String
    budget                   String
    requirements             String

    form_submission_id Int            @unique
    form_submission    FormSubmission @relation(fields: [form_submission_id], references: [id], onDelete: Cascade)
}

model PremiumAppSupport {
    id                      Int    @id @default(autoincrement())
    organization_name       String
    premium_addons          String
    primary_use_case        String
    current_smartsheet_plan String
    team_size               String
    implementation_scope    String
    requirements            String
    timeline                String
    budget                  String
    primary_contact_email   String

    form_submission_id Int            @unique
    form_submission    FormSubmission @relation(fields: [form_submission_id], references: [id], onDelete: Cascade)
}

model BookOneOnOne {
    id                    Int    @id @default(autoincrement())
    preferred_date        String
    preferred_time        String
    consultation_focus    String
    smartsheet_experience String
    team_size             String

    form_submission_id Int            @unique
    form_submission    FormSubmission @relation(fields: [form_submission_id], references: [id], onDelete: Cascade)
}

model PmoControlCenter {
    id                            Int    @id @default(autoincrement())
    organization_name             String
    control_centre_type           String
    required_features             String
    expected_project_scale        String
    team_size                     String
    current_smartsheet_experience String
    budget                        String
    timeline                      String
    primary_contact_email         String

    form_submission_id Int            @unique
    form_submission    FormSubmission @relation(fields: [form_submission_id], references: [id], onDelete: Cascade)
}

model LicenseRequest {
    id            Int    @id @default(autoincrement())
    license_type  String
    company_name  String
    industry      String
    team_size     String
    full_name     String
    email         String
    phone         String
    job_title     String
    timeline      String
    project_needs String

    form_submission_id Int            @unique
    form_submission    FormSubmission @relation(fields: [form_submission_id], references: [id], onDelete: Cascade)
}

model AdhocRequest {
    id                Int    @id @default(autoincrement())
    need_help_with    String
    description       String
    urgency_level     String
    budget            String
    expected_timeline String

    form_submission_id Int            @unique
    form_submission    FormSubmission @relation(fields: [form_submission_id], references: [id], onDelete: Cascade)
}

model Review {
    id              Int    @id @default(autoincrement())
    review          String
    communication   Int
    quality_of_work Int
    timeliness      Int
    value_for_money Int

    user_id Int  @unique
    user    User @relation(fields: [user_id], references: [id])

    form_submission_id Int            @unique
    form_submission    FormSubmission @relation(fields: [form_submission_id], references: [id])

    created_at DateTime @default(now())

    @@unique([user_id, form_submission_id])
}

model Conversation {
    id         String   @id @default(uuid())
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    user_id  Int
    user     User    @relation(fields: [user_id], references: [id])
    admin_id String?
    admin    Admin?  @relation(fields: [admin_id], references: [id])

    form_id Int            @unique
    form    FormSubmission @relation(fields: [form_id], references: [id], onDelete: Cascade)

    messages Message[]

    latest_message_id Int?     @unique
    latest_message    Message? @relation("LatestMessage", fields: [latest_message_id], references: [id])
    unread_count      Int?     @default(0)

    @@unique([user_id, admin_id, form_id])
}

enum MessageType {
    TEXT
    MEDIA
    OFFER
}

model Message {
    id           Int         @id @default(autoincrement())
    body         String?
    time         DateTime    @default(now())
    media_url    String?
    media_type   String?
    message_type MessageType
    is_read      Boolean     @default(false)

    offer_id Int?
    offer    Offer? @relation(fields: [offer_id], references: [id])

    conversation_id String
    conversation    Conversation @relation(fields: [conversation_id], references: [id])

    sender_user_id Int?
    sender_user    User? @relation(fields: [sender_user_id], references: [id])

    sender_admin_id String?
    sender_admin    Admin?  @relation(fields: [sender_admin_id], references: [id])

    Conversation_latest_message Conversation? @relation("LatestMessage")
}
